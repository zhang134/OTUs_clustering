# Calculate the sensitivy of clustering results with simlarity matrix. By Ze-Gang Wei.
# This the sequence number should be clustered / total sequence
import os,sys,getopt

def str_to_float(number):
    try:
        return float(number)
    except:
        return number

if __name__ == "__main__":
    usage = """

usage: python cluster_sensitivity_seq.py -i <similarity matrix file> -s <similarity threshold>

Example: python cluster_sensitivity_seq.py -i similarity_matrix_file.txt -s 0.6
----------------------- All file path needs absolute path.
--input/-i      (required) The similarity matrix file generated by my identify_edlib program.
--sim/-s        (required) The similarity threshlod.
--help/-h       Help

"""
    opts,arg=getopt.getopt(sys.argv[1:],"i:s:h:",["sim=", "seq=", "help="])
    parameters=[a[0] for a in opts]
    if '-h' in parameters or '--help' in parameters:
        print(usage)
        sys.exit(1)
    if len(parameters)==0:
        print(usage)
        sys.exit(1)
    if '-i' not in parameters and '--input' not in parameters:
        print("***Error, a input file is requred.***\n")
        print(usage)
        sys.exit(1)
    if '-s' not in parameters and '--sim' not in parameters:
        print("***Error, the similarity threshold is requred.***\n")
        print(usage)
        sys.exit(1)
    
    for i,a in opts:
        if i in ("--input","-i"):
            if not os.path.isfile(a):
                print("***%s is not found.***"%(a))
                print(usage)
                sys.exit(1)
            matrix_file = a
        if i in ("--sim","-s"):
            #if not os.path.isfile(a):
                #print("***%s is not found.***"%(a))
                #print(usage)
                #sys.exit(1)
            cutoff = float(a)
    seq_num = 0
    line_num = 1
    seq_is = [] # sequence should be assigned
    ff = open(matrix_file)
    line = ff.readline().strip().split()
    line = ff.readline().strip().split()
    sim_is=list(map(str_to_float,line))
    seq_num = len(line)
    while line:
        aa = sim_is[0 : line_num]
        if max(aa) >= cutoff:
            seq_is.append(line_num)
        line_num += 1
        line = ff.readline().strip().split()
        sim_is=list(map(str_to_float,line))
    ff.close()
    #total_pairs = (seq_num * (seq_num - 1) )/2
    sensitity = len(seq_is)/seq_num

    print("\n  Sensitity is: %f" % sensitity)
    print("  Total sequences: %d" % seq_num)
    #print("  Total pairwise: %d" % total_pairs) 
    print("  Sequence should be assigned: %d\n" % len(seq_is))
		





